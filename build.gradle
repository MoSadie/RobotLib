plugins {
    id "java"
    id "java-library"
    id "eclipse"
    id "idea"
	id "maven"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
}

// Configuration for install task which does the install of robotlib in local maven cache.
group = "com.github.ORF-4450"
archivesBaseName = "RobotLib"
version = "local"	// Version for local maven cache.

eclipse {
  //if you want parts of paths in resulting file to be replaced by variables (files):
  //pathVariables 'GRADLE_HOME': file('/best/software/gradle'), 'TOMCAT_HOME': file('../tomcat')

  classpath {
    //you can tweak the classpath of the Eclipse project by adding extra configurations:
    //plusConfigurations += [ configurations.provided ]

    //you can also remove configurations from the classpath:
    //minusConfigurations += [ configurations.someBoringConfig ]

    //if you want to append extra containers:
    //containers 'someFriendlyContainer', 'andYetAnotherContainer'

    //customizing the classes output directory:
    //defaultOutputDir = file('build-eclipse')

    //default settings for downloading sources and Javadoc:
    downloadSources = true
    downloadJavadoc = true
   }
 }
 
// Instructions on how to build this project:
// In the main folder of this project (the one with the gradlew.bat file) run the command "./gradlew.bat build" (or "gradlew build" if on a non-Windows platform)
// The jars will be in the "build" folder under "libs"

// This section is to prevent people from accidently deploying this project to a robot. 
deploy {
    for (String task : project.gradle.startParameter.taskNames) {
        if (task == "deploy")
            throw new GradleException("This is a library project! You can't deploy it to a robot!")
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Phoenix (Talon SRX)
// and NavX. These items are built into GradleRio and are not connected to the project
// referenced libraries.
dependencies {
    compileOnly 	wpilib()
    api				ctre()
    implementation 	navx()

	// For reference, here are a few more of the easy to add libraries not currently used:
   	//implementation pathfinder()
   	//implementation openrioMatchData()

   	// Quick guide to keywords:
   	// api is for libraries that are expected to be needed in the main robot project.
   	// implementation is for libraries that will not be needed in the main robot project.
   	// (Both api and implememtation keywords will have the library be automatically downloaded with RobotLib)
   	// compileOnly expects the used dependencies to exist somewhere else. (Ex. In a main robot project)
}

// Create Sources Jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// When Javadoc is created (./gradlew.bat javadoc) it will be in this directory in the project folder.
javadoc {
    destinationDir = file("doc")
    options.overview = "src/main/resources/overview.html"
}

// Create Javadoc Jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Additional artifacts to publish for JitPack
artifacts {
    archives sourcesJar
    archives javadocJar
}

//task buildToRobotLib(type: Copy, dependsOn: jar) {
//    mkdir System.getProperty("user.home") + "\\wpilib\\user\\RobotLib"
//    from 'build\\libs'
//    into System.getProperty("user.home") + "\\wpilib\\user\\RobotLib"
//}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}